#!/bin/bash

# funcs _______________________________________________________________________

not_in_path () { echo "$PATH"|grep -q "$1" && return 1 || return 0; }
dir_missing ()  { [ -d "$1" ] && return 1 || return 0; }
dir_found ()  { [ -d "$1" ] && return 0 || return 1; }
file_found () { [ -f "$1" ] && return 0 || return 1; }
str_eq () { [[ "$1" = "$2" ]] && return 0 || return 1; }
is_z () { [[ -z "$1" ]] && return 0 || return 1; }

exiterr () {
	printf "\nERROR: $1\nNow exiting...\n"
	exit 1
}
cancel_exit () {
	file_found "$BIN/gits" && rm "$BIN/gits"
	file_found "$BIN/gits-version.txt" && rm "$BIN/gits-version.txt"
	file_found "$BIN/GITS.1" && rm "$BIN/GITS.1"

	file_found "$TMP/gits" && mv "$TMP/gits" "$BIN/gits"
	file_found "$TMP/gits-version.txt" && mv "$TMP/gits-version.txt" "$BIN/gits-version.txt"
	file_found "$TMP/GITS.1" && mv "$TMP/GITS.1" "$BIN/GITS.1"
	printf "\nERROR: $1\nRestoring previous install and exiting...\n"
	exit 1
}
warn_msg () {
	printf "\nWARNING: $1\n"
}
# $1 is partial url (minus path, which is $2). $2 is also file name locally
try_dl_file () { 
	[ -f "./$2" ] && rm "./$2"
	curl -Ofs "$1/$2" > /dev/null
	[ -f "$2" ] && return 0 || return 1;
}


# VARS ________________________________________________________________________

is_z "$2" && branch="master" || branch="$2"
GH_URL="https://raw.githubusercontent.com/Jeff-Russ/gits/$branch/"
BIN="$HOME/bin"
TMP="$BIN/gits_temp"
APND="export PATH=\$PATH:\"$BIN\""

if str_eq "$3" "--verbose"; then 
	if_dbug () { return 0; }
else
	if_dbug () { return 1; }
fi

#  ~/bin directory ____________________________________________________________

if_dbug && echo "seeing if we need to mkdir $BIN..."
if dir_missing "$BIN"; then 
	mkdir "$BIN" || exiterr "mkdir $BIN failed."
fi
if_dbug && echo "seeing if we need to add it to \$PATH"
if not_in_path "$BIN"; then 
	echo "$APND" >> "$HOME/.bash_profile" || exiterr "append failed."
fi

if_dbug && echo "cd to ~/bin"
cd "$BIN"

if str_eq "$1" "--update"; then 
	if_dbug && echo "we are in update mode. Removing $TMP if found..."
	dir_found "$TMP" && rm -rf "$TMP"
	mkdir "$TMP" || exiterr "mkdir $TMP failed."
	
	if_dbug && echo "Moving ~/bin/gits to ~/bin/gits_temp if found..."
	file_found "$BIN/gits" && mv "$BIN/gits" "$TMP"
	
	if_dbug && echo "Moving ~/bin/gits-version.txt to ~/bin/gits_temp if found..."
	file_found "$BIN/gits-version.txt" && mv "$BIN/gits-version.txt" "$TMP"
	
	if_dbug && echo "Moving ~/bin/GITS.1 to ~/bin/gits_temp if found..."
	file_found "$BIN/GITS.1" && mv "$BIN/GITS.1" "$TMP"
	
	if_dbug && echo "$GH_URL/gits-version.txt download with curl..."
	try_dl_file "$GH_URL" "gits-version.txt" || cancel_exit "$GH_URL/gits-version.txt download failed."
	
	if_dbug && echo "$GH_URL/gits download with curl..."
	try_dl_file "$GH_URL" "gits" || cancel_exit "$GH_URL/gits download failed."
	
	if_dbug echo "chmod 755 ~/bin/gits..."
	chmod 755 "$BIN/gits" || cancel_exit "chmod 755 ~/bin/gits operation failed."
	
	if_dbug && echo "$GH_URL/GITS.1 download with curl..."
	try_dl_file "$GH_URL" "GITS.1" || cancel_exit "$GH_URL/GITS.1 download failed."
	
	printf "\nInstallation complete. Cleaning up... "
	rm -rf "$TMP"
	printf "Done.\n\n"
else
	if_dbug && echo "we are NOT in update mode. Aborting if $BIN/gits if found..."
	file_found "$BIN/gits" && exiterr "previous installation found. Run again with --update"
	
	if_dbug && echo "$GH_URL/gits-version.txt download with curl..."
	try_dl_file "$GH_URL" "gits-version.txt" || warn_msg "$GH_URL/gits-version.txt download failed."
	
	if_dbug && echo "$GH_URL/gits download with curl..."
	try_dl_file "$GH_URL" "gits" || warn_msg "$GH_URL/gits download failed."
	
	if_dbug && echo "chmod 755 ~/bin/gits..."
	chmod 755 "$BIN/gits" || warn_msg "operation failed."
	
	if_dbug && echo "$GH_URL/GITS.1 download with curl..."
	try_dl_file "$GH_URL" "GITS.1" || warn_msg "$GH_URL/GITS.1 download failed."
	
	printf "\nInstallation complete.\n\n"
fi


